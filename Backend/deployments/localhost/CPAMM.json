{
  "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount1",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token1",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_shares",
          "type": "uint256"
        }
      ],
      "name": "removerLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserve0",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserve1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token0",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token1",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd7e61228d7111e4342b9d0bcd5e533b2d1b40f59b7ded3399f58cca1004f6d10",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
    "transactionIndex": 0,
    "gasUsed": "1422181",
    "logsBloom": "0x
    "blockHash": "0x687cdae014673001fff4570d8fd16274bdeca34638def9af8299d576d0ff08b6",
    "transactionHash": "0xd7e61228d7111e4342b9d0bcd5e533b2d1b40f59b7ded3399f58cca1004f6d10",
    "logs": [],
    "blockNumber": 5,
    "cumulativeGasUsed": "1422181",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a44c5d6a2c5ce265aba4df007db18af6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount1\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"removerLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Test/AMM.sol\":\"CPAMM\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/Test/AMM.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"./interfaces/IAMM.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\n\\ncontract CPAMM {\\n    IERC20 public  token0;\\n    IERC20 public  token1;\\n\\n    address public immutable factory;\\n\\n    uint public reserve0; // internal balanceof token0\\n    uint public reserve1; // internal balanceof token1 \\n\\n    uint public totalSupply;  // to see the total supply of shares \\n    mapping(address => uint) public balanceOf;  // to map the shares of a specific address\\n\\n    constructor(){\\n        factory = msg.sender;\\n    }\\n\\n    function initialize(address _token0, address _token1) external {\\n        require(msg.sender == factory, 'FORBIDDEN'); // sufficient check\\n        token0 = IERC20(_token0);\\n        token1 = IERC20(_token1);\\n    }\\n\\n    function _mint(address _to,uint _amount) private { // to mint the shares \\n        balanceOf[_to] += _amount;\\n        totalSupply += _amount;\\n    }\\n\\n    function _burn(address _from,uint _amount) private { // to burn the shares \\n        balanceOf[_from] -= _amount;\\n        totalSupply -= _amount;\\n    }\\n\\n    function _update(uint _reserve0, uint _reserve1) private {\\n        reserve0 = _reserve0;\\n        reserve1 = _reserve1;\\n    }\\n\\n    function swap(address _tokenIn, uint _amountIn) external returns (uint amountOut) {\\n        require(\\n            _tokenIn == address(token0) || _tokenIn == address(token1),\\n            \\\"invalid token\\\"\\n        );\\n        require(_amountIn > 0, \\\"amount in = 0\\\");\\n\\n        bool isToken0 = _tokenIn == address(token0);\\n\\n        (IERC20 tokenIn, IERC20 tokenOut, uint reserveIn, uint reserveOut) = isToken0\\n            ? (token0, token1, reserve0, reserve1)\\n            : (token1, token0, reserve1, reserve0);\\n\\n        tokenIn.transferFrom(msg.sender, address(this), _amountIn);\\n\\n        /*\\n        How much dy for dx?\\n\\n        xy = k\\n        (x + dx)(y - dy) = k\\n        y - dy = k / (x + dx)\\n        y - k / (x + dx) = dy\\n        y - xy / (x + dx) = dy\\n        (yx + ydx - xy) / (x + dx) = dy\\n        ydx / (x + dx) = dy\\n        */\\n        // 0.3% fee\\n        uint amountInWithFee = (_amountIn * 997) / 1000;\\n        amountOut = (reserveOut * amountInWithFee) / (reserveIn + amountInWithFee);\\n\\n        tokenOut.transfer(msg.sender, amountOut);\\n\\n        _update(token0.balanceOf(address(this)), token1.balanceOf(address(this)));\\n    }\\n\\n    // when someone add liquidity , shares mint\\n    function addLiquidity(uint _amount0, uint _amount1) external returns(uint shares){ \\n        // pull in token 1 and token 2 \\n        // mint the shares \\n        // update the reserves\\n        \\n        // pull in tokens \\n        token0.transferFrom(msg.sender,address(this),_amount0);\\n        token1.transferFrom(msg.sender,address(this),_amount1);\\n\\n        // dy/dx = y/x the ratio of tokens coming in == ration of the reserves of the tokens\\n        if (reserve0 >0 || reserve1 > 0) {\\n            require(reserve0 * _amount1 == reserve1 * _amount0, \\\"dy/dx != y/x\\\");\\n        }\\n\\n        // mint Shares \\n        // f(x,y) = value of liquidity = sqrt(x*y)\\n        // shares (s) = (dx/x)T = (dy/y)T\\n        if (totalSupply == 0) {\\n            shares = _sqrt(_amount0 * _amount1);\\n        }\\n        else {\\n            shares  = _min((_amount0 * totalSupply)/reserve0, (_amount1 * totalSupply)/reserve1);\\n        }\\n\\n        require(shares > 0, \\\"error shares < 0\\\");\\n        // mint the shares\\n        _mint(msg.sender,shares); \\n\\n        // update the reserves\\n        _update(token0.balanceOf(address(this)),token1.balanceOf(address(this)));\\n    }\\n    \\n    // when someone removes liquidity , shares burn and collect the fees\\n    function removerLiquidity(uint _shares) external returns(uint amount0,uint amount1){ \\n        // first calculate amount0 and amount1 to withdraw \\n        // dx = s / T * x\\n        // dy = s / T * y\\n        uint bal0 = token0.balanceOf(address(this));\\n        uint bal1 = token1.balanceOf(address(this));\\n\\n        amount0 = (_shares * bal0) / totalSupply;\\n        amount1 = (_shares * bal1) / totalSupply;\\n        require(amount0 > 0 && amount1 > 0, \\\"amount0 or amount1 is < 0\\\");\\n\\n        // burn the shares \\n        _burn(msg.sender, _shares);\\n\\n        // update the reserves \\n        _update(bal0 - amount0, bal1 - amount1);\\n\\n        // transfer the tokens to msg.sender \\n        token0.transfer(msg.sender, amount0);\\n        token1.transfer(msg.sender, amount1);\\n\\n\\n    }\\n\\n    // to get the liquidity\\n    function _sqrt(uint y) private pure returns(uint z) {  \\n        if (y > 3) {\\n            z = y;\\n            uint x = y/2 + 1;\\n            while(x < z){\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        }\\n        else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    // to get the minimum of 2 numbers\\n    function _min(uint x, uint y) private pure returns(uint) { \\n        return (x <= y) ? x : y;\\n    }\\n\\n}\",\"keccak256\":\"0xe1e8dab41a5404b49f87e50ab9cab2693d0595fdbaac1406e6b664ba08a9fdfa\",\"license\":\"MIT\"},\"contracts/Test/interfaces/IAMM.sol\":{\"content\":\"// SPDX-License-Identifier : MIT\\npragma solidity 0.8.19;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\",\"keccak256\":\"0x7582a957683ea022126e33e357c588805e32f55221424784b0f87274872e7951\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c80635a76f25e116100715780635a76f25e1461015557806370a08231146101735780639cd441da146101a3578063c45a0155146101d3578063d004f0f7146101f1578063d21220a714610221576100a9565b80630dfe1681146100ae57806318160ddd146100cc578063443cb4bc146100ea578063485cc9551461010857806355ab13ef14610124575b600080fd5b6100b661023f565b6040516100c3919061119a565b60405180910390f35b6100d4610263565b6040516100e191906111ce565b60405180910390f35b6100f2610269565b6040516100ff91906111ce565b60405180910390f35b610122600480360381019061011d919061122c565b61026f565b005b61013e60048036038101906101399190611298565b610382565b60405161014c9291906112c5565b60405180910390f35b61015d6106ba565b60405161016a91906111ce565b60405180910390f35b61018d600480360381019061018891906112ee565b6106c0565b60405161019a91906111ce565b60405180910390f35b6101bd60048036038101906101b8919061131b565b6106d8565b6040516101ca91906111ce565b60405180910390f35b6101db610a8b565b6040516101e8919061136a565b60405180910390f35b61020b60048036038101906102069190611385565b610aaf565b60405161021891906111ce565b60405180910390f35b610229610f69565b604051610236919061119a565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60045481565b60025481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102f490611422565b60405180910390fd5b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016103e1919061136a565b602060405180830381865afa1580156103fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104229190611457565b90506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610481919061136a565b602060405180830381865afa15801561049e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c29190611457565b905060045482866104d391906114b3565b6104dd9190611524565b935060045481866104ee91906114b3565b6104f89190611524565b925060008411801561050a5750600083115b610549576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610540906115a1565b60405180910390fd5b6105533386610f8f565b610573848361056291906115c1565b848361056e91906115c1565b611002565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33866040518363ffffffff1660e01b81526004016105ce9291906115f5565b6020604051808303816000875af11580156105ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106119190611656565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff1660e01b815260040161066f9291906115f5565b6020604051808303816000875af115801561068e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b29190611656565b505050915091565b60035481565b60056020528060005260406000206000915090505481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b815260040161073893929190611683565b6020604051808303816000875af1158015610757573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077b9190611656565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b81526004016107db93929190611683565b6020604051808303816000875af11580156107fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081e9190611656565b506000600254118061083257506000600354115b15610894578260035461084591906114b3565b8260025461085391906114b3565b14610893576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088a90611706565b60405180910390fd5b5b6000600454036108b9576108b282846108ad91906114b3565b611014565b90506108fa565b6108f7600254600454856108cd91906114b3565b6108d79190611524565b600354600454856108e891906114b3565b6108f29190611524565b61108e565b90505b6000811161093d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093490611772565b60405180910390fd5b61094733826110a8565b610a8560008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016109a3919061136a565b602060405180830381865afa1580156109c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e49190611457565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610a3f919061136a565b602060405180830381865afa158015610a5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a809190611457565b611002565b92915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480610b595750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b610b98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8f906117de565b60405180910390fd5b60008211610bdb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd29061184a565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614905060008060008084610c8957600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600354600254610cd4565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166002546003545b93509350935093508373ffffffffffffffffffffffffffffffffffffffff166323b872dd33308a6040518463ffffffff1660e01b8152600401610d1993929190611683565b6020604051808303816000875af1158015610d38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5c9190611656565b5060006103e86103e589610d7091906114b3565b610d7a9190611524565b90508083610d88919061186a565b8183610d9491906114b3565b610d9e9190611524565b96508373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33896040518363ffffffff1660e01b8152600401610ddb9291906115f5565b6020604051808303816000875af1158015610dfa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1e9190611656565b50610f5d60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610e7b919061136a565b602060405180830381865afa158015610e98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebc9190611457565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610f17919061136a565b602060405180830381865afa158015610f34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f589190611457565b611002565b50505050505092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b80600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610fde91906115c1565b925050819055508060046000828254610ff791906115c1565b925050819055505050565b81600281905550806003819055505050565b6000600382111561107b57819050600060016002846110339190611524565b61103d919061186a565b90505b8181101561107557809150600281828561105a9190611524565b611064919061186a565b61106e9190611524565b9050611040565b50611089565b6000821461108857600190505b5b919050565b60008183111561109e57816110a0565b825b905092915050565b80600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546110f7919061186a565b925050819055508060046000828254611110919061186a565b925050819055505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061116061115b6111568461111b565b61113b565b61111b565b9050919050565b600061117282611145565b9050919050565b600061118482611167565b9050919050565b61119481611179565b82525050565b60006020820190506111af600083018461118b565b92915050565b6000819050919050565b6111c8816111b5565b82525050565b60006020820190506111e360008301846111bf565b92915050565b600080fd5b60006111f98261111b565b9050919050565b611209816111ee565b811461121457600080fd5b50565b60008135905061122681611200565b92915050565b60008060408385031215611243576112426111e9565b5b600061125185828601611217565b925050602061126285828601611217565b9150509250929050565b611275816111b5565b811461128057600080fd5b50565b6000813590506112928161126c565b92915050565b6000602082840312156112ae576112ad6111e9565b5b60006112bc84828501611283565b91505092915050565b60006040820190506112da60008301856111bf565b6112e760208301846111bf565b9392505050565b600060208284031215611304576113036111e9565b5b600061131284828501611217565b91505092915050565b60008060408385031215611332576113316111e9565b5b600061134085828601611283565b925050602061135185828601611283565b9150509250929050565b611364816111ee565b82525050565b600060208201905061137f600083018461135b565b92915050565b6000806040838503121561139c5761139b6111e9565b5b60006113aa85828601611217565b92505060206113bb85828601611283565b9150509250929050565b600082825260208201905092915050565b7f464f5242494444454e0000000000000000000000000000000000000000000000600082015250565b600061140c6009836113c5565b9150611417826113d6565b602082019050919050565b6000602082019050818103600083015261143b816113ff565b9050919050565b6000815190506114518161126c565b92915050565b60006020828403121561146d5761146c6111e9565b5b600061147b84828501611442565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006114be826111b5565b91506114c9836111b5565b92508282026114d7816111b5565b915082820484148315176114ee576114ed611484565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061152f826111b5565b915061153a836111b5565b92508261154a576115496114f5565b5b828204905092915050565b7f616d6f756e7430206f7220616d6f756e7431206973203c203000000000000000600082015250565b600061158b6019836113c5565b915061159682611555565b602082019050919050565b600060208201905081810360008301526115ba8161157e565b9050919050565b60006115cc826111b5565b91506115d7836111b5565b92508282039050818111156115ef576115ee611484565b5b92915050565b600060408201905061160a600083018561135b565b61161760208301846111bf565b9392505050565b60008115159050919050565b6116338161161e565b811461163e57600080fd5b50565b6000815190506116508161162a565b92915050565b60006020828403121561166c5761166b6111e9565b5b600061167a84828501611641565b91505092915050565b6000606082019050611698600083018661135b565b6116a5602083018561135b565b6116b260408301846111bf565b949350505050565b7f64792f647820213d20792f780000000000000000000000000000000000000000600082015250565b60006116f0600c836113c5565b91506116fb826116ba565b602082019050919050565b6000602082019050818103600083015261171f816116e3565b9050919050565b7f6572726f7220736861726573203c203000000000000000000000000000000000600082015250565b600061175c6010836113c5565b915061176782611726565b602082019050919050565b6000602082019050818103600083015261178b8161174f565b9050919050565b7f696e76616c696420746f6b656e00000000000000000000000000000000000000600082015250565b60006117c8600d836113c5565b91506117d382611792565b602082019050919050565b600060208201905081810360008301526117f7816117bb565b9050919050565b7f616d6f756e7420696e203d203000000000000000000000000000000000000000600082015250565b6000611834600d836113c5565b915061183f826117fe565b602082019050919050565b6000602082019050818103600083015261186381611827565b9050919050565b6000611875826111b5565b9150611880836111b5565b925082820190508082111561189857611897611484565b5b9291505056fea2646970667358221220dd9a84879057d79edaaafd41a2286e3ea672170aa51186a00e84b72bbac9a1d164736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3598,
        "contract": "contracts/Test/AMM.sol:CPAMM",
        "label": "token0",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20)692"
      },
      {
        "astId": 3601,
        "contract": "contracts/Test/AMM.sol:CPAMM",
        "label": "token1",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)692"
      },
      {
        "astId": 3605,
        "contract": "contracts/Test/AMM.sol:CPAMM",
        "label": "reserve0",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 3607,
        "contract": "contracts/Test/AMM.sol:CPAMM",
        "label": "reserve1",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 3609,
        "contract": "contracts/Test/AMM.sol:CPAMM",
        "label": "totalSupply",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 3613,
        "contract": "contracts/Test/AMM.sol:CPAMM",
        "label": "balanceOf",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)692": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}